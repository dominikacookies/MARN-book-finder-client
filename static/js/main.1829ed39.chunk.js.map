{"version":3,"sources":["utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/bookFetcher.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","console","log","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","Auth","loggedIn","SAVEBOOK","gql","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","useMutation","context","headers","authorization","onCompleted","data","bookToSave","saveBook","savedBooks","pop","error","replace","loading","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","find","variables","saveBookInput","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","GET_USER","REMOVE_BOOK","userData","onError","removeBook","useQuery","newData","me","handleDeleteBook","removeBookBookId","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","SIGNUP","login","addUser","signup","handleInputChange","currentTarget","checkValidity","stopPropagation","addUserInput","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","LOGIN","loginInput","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","process","GRAPHQL_URL","cache","InMemoryCache","App","ApolloProvider","baseName","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1829ed39.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from \"jwt-decode\";\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    console.log(\"this is the token\", idToken);\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/bookFetcher\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n// import SAVEBOOK from \"../mutations\";\n\nconst SearchBooks = () => {\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  const SAVEBOOK = gql`\n    mutation Mutation($saveBookInput: SaveBookInput!) {\n      saveBook(input: $saveBookInput) {\n        bookCount\n        username\n        savedBooks {\n          bookId\n        }\n      }\n    }\n  `;\n\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const [saveBook, { loading, error }] = useMutation(SAVEBOOK, {\n    context: {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${token}`,\n      },\n    },\n    onCompleted: (data) => {\n      const bookToSave = data.saveBook.savedBooks.pop();\n\n      console.log(\"this is the book to save\", bookToSave);\n      if (error) {\n        window.replace(\"./login\");\n      }\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    },\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      saveBook({\n        variables: {\n          saveBookInput: {\n            ...bookToSave,\n          },\n        },\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  const GET_USER = gql`\n    query Query {\n      me {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n          bookId\n          authors\n          description\n          title\n          link\n          image\n        }\n      }\n    }\n  `;\n\n  const REMOVE_BOOK = gql`\n    mutation RemoveBookMutation($removeBookBookId: ID!) {\n      removeBook(bookId: $removeBookBookId) {\n        bookCount\n      }\n    }\n  `;\n\n  const [userData, setUserData] = useState(\"hello\");\n\n  const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  const [removeBook] = useMutation(REMOVE_BOOK, {\n    context: {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${token}`,\n      },\n    },\n    onError: (error) => {\n      return <h1>There's an error.</h1>;\n    },\n  });\n\n  const { loading, error, data } = useQuery(GET_USER, {\n    context: {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${token}`,\n      },\n    },\n  });\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  if (error) {\n    throw new Error(\"something went wrong!\");\n  }\n\n  if (data) {\n    const newData = data.me;\n    console.log(\"this is the data\", newData);\n\n    // create function that accepts the book's mongo _id value as param and deletes the book from the database\n    const handleDeleteBook = async (bookId) => {\n      try {\n        await removeBook({\n          variables: {\n            removeBookBookId: bookId,\n          },\n        });\n\n        // upon success, remove book's id from localStorage\n        removeBookId(bookId);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    return (\n      <>\n        <Jumbotron fluid className=\"text-light bg-dark\">\n          <Container>\n            <h1>Viewing saved books!</h1>\n          </Container>\n        </Jumbotron>\n        <Container>\n          <h2>\n            {console.log(\"this is the user data\", userData)}\n            {newData.savedBooks.length\n              ? `Viewing ${newData.savedBooks.length} saved ${\n                  newData.savedBooks.length === 1 ? \"book\" : \"books\"\n                }:`\n              : \"You have no saved books!\"}\n          </h2>\n          <CardColumns>\n            {newData.savedBooks.map((book) => {\n              return (\n                <Card key={book.bookId} border=\"dark\">\n                  {book.image ? (\n                    <Card.Img\n                      src={book.image}\n                      alt={`The cover for ${book.title}`}\n                      variant=\"top\"\n                    />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className=\"small\">Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    <Button\n                      className=\"btn-block btn-danger\"\n                      onClick={() => handleDeleteBook(book.bookId)}\n                    >\n                      Delete this Book!\n                    </Button>\n                  </Card.Body>\n                </Card>\n              );\n            })}\n          </CardColumns>\n        </Container>\n      </>\n    );\n  }\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation, gql } from \"@apollo/client\";\n\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const SIGNUP = gql`\n    mutation AddUserMutation($addUserInput: NewUserInput!) {\n      addUser(input: $addUserInput) {\n        token\n        user {\n          _id\n          username\n          email\n        }\n      }\n    }\n  `;\n  const [signup] = useMutation(SIGNUP, {\n    onCompleted: (data) => {\n      Auth.login(data.addUser.token);\n    },\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    await signup({\n      variables: {\n        addUserInput: userFormData,\n      },\n    });\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation, gql } from \"@apollo/client\";\n\nimport Auth from \"../utils/auth\";\n// import LOGIN from \"../mutations\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const LOGIN = gql`\n    mutation LoginMutation($loginInput: LoginInput!) {\n      login(input: $loginInput) {\n        token\n        user {\n          _id\n          username\n          email\n        }\n      }\n    }\n  `;\n  const [login, { loading, error }] = useMutation(LOGIN, {\n    onCompleted: (data) => {\n      console.log(data);\n      Auth.login(data.login.token);\n    },\n  });\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      await login({\n        variables: {\n          loginInput: userFormData,\n        },\n      });\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\n\nconst client = new ApolloClient({\n  uri:\n    process.env.GRAPHQL_URL || \"https://marn-book-finder-server.herokuapp.com/\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router baseName=\"/\">\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={SearchBooks} />\n            <Route exact path=\"/saved\" component={SavedBooks} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}